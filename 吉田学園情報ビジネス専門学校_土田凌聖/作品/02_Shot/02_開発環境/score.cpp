//==============================================================================================
//
// スコア　　　score.cpp
// 土田凌聖
//
//==============================================================================================

//**********************************************************************************************
// インクルード
//**********************************************************************************************
#include"result.h"
#include"score.h"
#include"number.h"

//==============================================================================================
// コンストラクタ
//==============================================================================================
CScore::CScore()
{
	m_pNumber[SCORE_NUM] = {};
	m_fWidth= 0.0f;
	m_fHeight = 0.0f;
	m_nScore = 0;
}

//==============================================================================================
// デスラクタ
//==============================================================================================
CScore::~CScore()
{
}

//==============================================================================================
// 初期化処理
//==============================================================================================
HRESULT CScore::Init(D3DXVECTOR3 pos)
{
	for (int nCnt = 0; nCnt < SCORE_NUM; nCnt++)
	{
		m_pNumber[nCnt] = CNumber::Create({pos.x + nCnt * (m_fWidth + 5), pos.y, pos.z}, m_fWidth, m_fHeight);
	}

	SetScore(0);

	return S_OK;
}

//==============================================================================================
// 終了処理
//==============================================================================================
void CScore::Uninit()
{
	for (int nCnt = 0; nCnt < SCORE_NUM; nCnt++)
	{
		if (m_pNumber[nCnt] != nullptr)
		{
			m_pNumber[nCnt]->Uninit();
			m_pNumber[nCnt] = nullptr;
		}
	}
}

//==============================================================================================
// 更新処理
//==============================================================================================
void CScore::Update()
{
}

//==============================================================================================
// 描画処理
//==============================================================================================
void CScore::Draw()
{
}

//==============================================================================================
// 生成処理
//==============================================================================================
CScore *CScore::Create(D3DXVECTOR3 pos, float width, float height , D3DXCOLOR col)
{
	CScore *pScore = new CScore;

	if (pScore != nullptr)
	{
		pScore->SetSize(width, height);
		pScore->Init(pos);
		pScore->SetCol(col);
	}

	return pScore;
}

//==============================================================================================
// 加算処理
//==============================================================================================
void CScore::AddScore(int score)
{
	m_nScore += score;

	// スコアの設定
	SetScore(m_nScore);
}

//==============================================================================================
// サイズの設定
//==============================================================================================
void CScore::SetSize(float width, float height)
{
	m_fWidth = width;
	m_fHeight = height;
}

//==============================================================================================
// スコアの設定
//==============================================================================================
void CScore::SetScore(int score)
{
	if (m_nScore < MAX_SCORE)
	{
		m_nScore = score;
	}
	else
	{
		m_nScore = MAX_SCORE;
	}
		int aPosTexU[SCORE_NUM];		//各桁の数字を格納

		aPosTexU[0] = m_nScore % 100000000 / 10000000;
		aPosTexU[1] = m_nScore % 10000000 / 1000000;
		aPosTexU[2] = m_nScore % 1000000 / 100000;
		aPosTexU[3] = m_nScore % 100000 / 10000;
		aPosTexU[4] = m_nScore % 10000 / 1000;
		aPosTexU[5] = m_nScore % 1000 / 100;
		aPosTexU[6] = m_nScore % 100 / 10;
		aPosTexU[7] = m_nScore % 10 / 1;

	for (int nCnt = 0; nCnt < SCORE_NUM; nCnt++)
	{
		m_pNumber[nCnt]->SetTexPos(0.0f, 1.0f, 0.1f * aPosTexU[nCnt] + 0.1f, 0.1f * aPosTexU[nCnt]);
	}
}

//==============================================================================================
// 色の設定
//==============================================================================================
void CScore::SetCol(D3DXCOLOR col)
{
	for (int nCnt = 0; nCnt < SCORE_NUM; nCnt++)
	{
		m_pNumber[nCnt]->Setcollar(&col);
	}
}

//==============================================================================================
// 終了時のスコア
//==============================================================================================
void CScore::SaveScore()
{
	CResult::SetScore(m_nScore);
}
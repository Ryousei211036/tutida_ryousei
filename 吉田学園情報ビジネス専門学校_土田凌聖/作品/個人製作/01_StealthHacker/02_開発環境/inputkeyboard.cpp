//==============================================================================================
//
// キーボード　　　inputkeyboard.cpp
// 土田凌聖
//
//==============================================================================================

//**********************************************************************************************
// インクルード
//**********************************************************************************************
#include"inputkeyboard.h"

//==============================================================================================
// コンストラクタ
//==============================================================================================
CInputkeyboard::CInputkeyboard()
{
}

//==============================================================================================
// デストラクタ
//==============================================================================================
CInputkeyboard::~CInputkeyboard()
{
}

//==============================================================================================
// 初期化処理
//==============================================================================================
HRESULT CInputkeyboard::Init(HINSTANCE hInstance, HWND hWnd)
{
	CInput::Init(hInstance, hWnd);

	return S_OK;
}

//==============================================================================================
// 終了処理
//==============================================================================================
void CInputkeyboard::Uninit()
{
	CInput::Uninit();
}

//==============================================================================================
// 更新処理
//==============================================================================================
void CInputkeyboard::Update()
{
	BYTE aKeyState[m_nNum_KeyMax];		//キーボードの入力処理
	int nCntKey;

	//入力デバイスからデータを取得
	if (SUCCEEDED(m_pDevice->GetDeviceState(sizeof(aKeyState), &aKeyState[0])))
	{
		for (nCntKey = 0; nCntKey < m_nNum_KeyMax; nCntKey++)
		{
			m_aKeyStateTrigger[nCntKey] = ~m_aKeyState[nCntKey] & aKeyState[nCntKey];	// キーボードのトリガー情報を保存
			m_aKeyStateRelease[nCntKey] = m_aKeyState[nCntKey] & ~aKeyState[nCntKey];	// キーボードのリリース情報を保存
			m_aKeyState[nCntKey] = aKeyState[nCntKey];									//キーボードのプレス情報を保存
		}
	}

	else
	{
		m_pDevice->Acquire();		//キーボードへのアクセス権を獲得
	}
}

//==============================================================================================
// キーボードのプレス情報の取得
//==============================================================================================
bool CInputkeyboard::GetKeyboardPress(int nKey)
{
	return (m_aKeyState[nKey] & 0x80) ? true : false;
}

//==============================================================================================
// キーボードのトリガー情報の取得
//==============================================================================================
bool CInputkeyboard::GetKeyboardTrigger(int nKey)
{
	return (m_aKeyStateTrigger[nKey] & 0x80) ? true : false;
}

//==============================================================================================
// キーボードのリリース情報の取得
//==============================================================================================
bool CInputkeyboard::GetKeyboardRelease(int nKey)
{
	return (m_aKeyStateRelease[nKey] & 0x80) ? true : false;
}